//Infected Hospital Game (MVC Design)
src/
â”œâ”€â”€ model/
â”‚   â”œâ”€â”€ Player.java              // Manages player state: health, inventory, currentRoom, activePuzzle
â”‚   â”œâ”€â”€ Inventory.java           // Holds and manages player's items: add, remove, check
â”‚   â”œâ”€â”€ Item.java                // Defines items (name, type, effect, description)
â”‚   â”œâ”€â”€ Room.java                // Represents a room: name, description, exits, monsters, items, puzzle
â”‚   â”œâ”€â”€ Monster.java             // Defines enemy entities with health, damage, and behavior
â”‚   â””â”€â”€ Puzzle.java              // Represents puzzle challenges: answer, hint, result, solved state
â”‚
â”œâ”€â”€ controller/
â”‚   â”œâ”€â”€ GameController.java      // Main game logic: movement, command parsing, flow control
â”‚   â”œâ”€â”€ PuzzleController.java    // Handles puzzle interactions: solve, hint, leave
â”‚   â”œâ”€â”€ CombatController.java    // Manages combat between player and monster: attack, flee, health
â”‚   â””â”€â”€ ItemController.java      // Manages item-related logic: use, drop, equip, inspect
â”‚
â”œâ”€â”€ view/
â”‚   â”œâ”€â”€ GameView.java            // Displays general UI: room details, inventory, player status
â”‚   â”œâ”€â”€ PuzzleView.java          // Outputs puzzle-related messages and prompts
â”‚   â””â”€â”€ CombatView.java          // Outputs combat-related information and status updates
â”‚
â”œâ”€â”€ loader/
â”‚   â””â”€â”€ FileLoader.java          // Loads data from external files: puzzles, rooms, items, monsters
â”‚
â”œâ”€â”€ main/
â”‚   â””â”€â”€ Main.java                // Game entry point: sets up the game world, launches GameController
â”‚
â””â”€â”€ GameStructure.java           // ðŸ“˜ Developer reference for all classes and how they interact
